{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport MDCFoundation from '@material/base/foundation';\nimport MDCRippleAdapter from './adapter';\nimport { cssClasses, strings, numbers } from './constants';\nimport { getNormalizedEventCoords } from './util';\n/**\n * @typedef {{\n *   isActivated: (boolean|undefined),\n *   hasDeactivationUXRun: (boolean|undefined),\n *   wasActivatedByPointer: (boolean|undefined),\n *   wasElementMadeActive: (boolean|undefined),\n *   activationEvent: (!Event|undefined),\n *   isProgrammatic: (boolean|undefined)\n * }}\n */\n\nvar ActivationStateType;\n/**\n * @typedef {{\n *   activate: (string|undefined),\n *   deactivate: (string|undefined),\n *   focus: (string|undefined),\n *   blur: (string|undefined)\n * }}\n */\n\nvar ListenerInfoType;\n/**\n * @typedef {{\n *   activate: function(!Event),\n *   deactivate: function(!Event=),\n *   focus: function(),\n *   blur: function()\n * }}\n */\n\nvar ListenersType;\n/**\n * @typedef {{\n *   x: number,\n *   y: number\n * }}\n */\n\nvar PointType; // Activation events registered on the root element of each instance for activation\n\nvar ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown']; // Deactivation events registered on documentElement when a pointer-related down event occurs\n\nvar POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu']; // Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations\n\n/** @type {!Array<!EventTarget>} */\n\nvar activatedTargets = [];\n/**\n * @extends {MDCFoundation<!MDCRippleAdapter>}\n */\n\nvar MDCRippleFoundation =\n/*#__PURE__*/\nfunction (_MDCFoundation) {\n  _inherits(MDCRippleFoundation, _MDCFoundation);\n\n  _createClass(MDCRippleFoundation, null, [{\n    key: \"cssClasses\",\n    get: function get() {\n      return cssClasses;\n    }\n  }, {\n    key: \"strings\",\n    get: function get() {\n      return strings;\n    }\n  }, {\n    key: \"numbers\",\n    get: function get() {\n      return numbers;\n    }\n  }, {\n    key: \"defaultAdapter\",\n    get: function get() {\n      return {\n        browserSupportsCssVars: function browserSupportsCssVars()\n        /* boolean - cached */\n        {},\n        isUnbounded: function isUnbounded()\n        /* boolean */\n        {},\n        isSurfaceActive: function isSurfaceActive()\n        /* boolean */\n        {},\n        isSurfaceDisabled: function isSurfaceDisabled()\n        /* boolean */\n        {},\n        addClass: function addClass()\n        /* className: string */\n        {},\n        removeClass: function removeClass()\n        /* className: string */\n        {},\n        containsEventTarget: function containsEventTarget()\n        /* target: !EventTarget */\n        {},\n        registerInteractionHandler: function registerInteractionHandler()\n        /* evtType: string, handler: EventListener */\n        {},\n        deregisterInteractionHandler: function deregisterInteractionHandler()\n        /* evtType: string, handler: EventListener */\n        {},\n        registerDocumentInteractionHandler: function registerDocumentInteractionHandler()\n        /* evtType: string, handler: EventListener */\n        {},\n        deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler()\n        /* evtType: string, handler: EventListener */\n        {},\n        registerResizeHandler: function registerResizeHandler()\n        /* handler: EventListener */\n        {},\n        deregisterResizeHandler: function deregisterResizeHandler()\n        /* handler: EventListener */\n        {},\n        updateCssVariable: function updateCssVariable()\n        /* varName: string, value: string */\n        {},\n        computeBoundingRect: function computeBoundingRect()\n        /* ClientRect */\n        {},\n        getWindowPageOffset: function getWindowPageOffset()\n        /* {x: number, y: number} */\n        {}\n      };\n    }\n  }]);\n\n  function MDCRippleFoundation(adapter) {\n    var _this;\n\n    _classCallCheck(this, MDCRippleFoundation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDCRippleFoundation).call(this, Object.assign(MDCRippleFoundation.defaultAdapter, adapter)));\n    /** @private {number} */\n\n    _this.layoutFrame_ = 0;\n    /** @private {!ClientRect} */\n\n    _this.frame_ =\n    /** @type {!ClientRect} */\n    {\n      width: 0,\n      height: 0\n    };\n    /** @private {!ActivationStateType} */\n\n    _this.activationState_ = _this.defaultActivationState_();\n    /** @private {number} */\n\n    _this.initialSize_ = 0;\n    /** @private {number} */\n\n    _this.maxRadius_ = 0;\n    /** @private {function(!Event)} */\n\n    _this.activateHandler_ = function (e) {\n      return _this.activate_(e);\n    };\n    /** @private {function(!Event=)} */\n\n\n    _this.deactivateHandler_ = function () {\n      return _this.deactivate_();\n    };\n    /** @private {function(!Event=)} */\n\n\n    _this.focusHandler_ = function () {\n      return _this.handleFocus();\n    };\n    /** @private {function(!Event=)} */\n\n\n    _this.blurHandler_ = function () {\n      return _this.handleBlur();\n    };\n    /** @private {!Function} */\n\n\n    _this.resizeHandler_ = function () {\n      return _this.layout();\n    };\n    /** @private {{left: number, top:number}} */\n\n\n    _this.unboundedCoords_ = {\n      left: 0,\n      top: 0\n    };\n    /** @private {number} */\n\n    _this.fgScale_ = 0;\n    /** @private {number} */\n\n    _this.activationTimer_ = 0;\n    /** @private {number} */\n\n    _this.fgDeactivationRemovalTimer_ = 0;\n    /** @private {boolean} */\n\n    _this.activationAnimationHasEnded_ = false;\n    /** @private {!Function} */\n\n    _this.activationTimerCallback_ = function () {\n      _this.activationAnimationHasEnded_ = true;\n\n      _this.runDeactivationUXLogicIfReady_();\n    };\n    /** @private {!Event|undefined} */\n\n\n    _this.previousActivationEvent_;\n    return _this;\n  }\n  /**\n   * We compute this property so that we are not querying information about the client\n   * until the point in time where the foundation requests it. This prevents scenarios where\n   * client-side feature-detection may happen too early, such as when components are rendered on the server\n   * and then initialized at mount time on the client.\n   * @return {boolean}\n   * @private\n   */\n\n\n  _createClass(MDCRippleFoundation, [{\n    key: \"supportsPressRipple_\",\n    value: function supportsPressRipple_() {\n      return this.adapter_.browserSupportsCssVars();\n    }\n    /**\n     * @return {!ActivationStateType}\n     */\n\n  }, {\n    key: \"defaultActivationState_\",\n    value: function defaultActivationState_() {\n      return {\n        isActivated: false,\n        hasDeactivationUXRun: false,\n        wasActivatedByPointer: false,\n        wasElementMadeActive: false,\n        activationEvent: undefined,\n        isProgrammatic: false\n      };\n    }\n    /** @override */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      var supportsPressRipple = this.supportsPressRipple_();\n      this.registerRootHandlers_(supportsPressRipple);\n\n      if (supportsPressRipple) {\n        var _MDCRippleFoundation$ = MDCRippleFoundation.cssClasses,\n            ROOT = _MDCRippleFoundation$.ROOT,\n            UNBOUNDED = _MDCRippleFoundation$.UNBOUNDED;\n        requestAnimationFrame(function () {\n          _this2.adapter_.addClass(ROOT);\n\n          if (_this2.adapter_.isUnbounded()) {\n            _this2.adapter_.addClass(UNBOUNDED); // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n\n\n            _this2.layoutInternal_();\n          }\n        });\n      }\n    }\n    /** @override */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this3 = this;\n\n      if (this.supportsPressRipple_()) {\n        if (this.activationTimer_) {\n          clearTimeout(this.activationTimer_);\n          this.activationTimer_ = 0;\n          this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n        }\n\n        if (this.fgDeactivationRemovalTimer_) {\n          clearTimeout(this.fgDeactivationRemovalTimer_);\n          this.fgDeactivationRemovalTimer_ = 0;\n          this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n        }\n\n        var _MDCRippleFoundation$2 = MDCRippleFoundation.cssClasses,\n            ROOT = _MDCRippleFoundation$2.ROOT,\n            UNBOUNDED = _MDCRippleFoundation$2.UNBOUNDED;\n        requestAnimationFrame(function () {\n          _this3.adapter_.removeClass(ROOT);\n\n          _this3.adapter_.removeClass(UNBOUNDED);\n\n          _this3.removeCssVars_();\n        });\n      }\n\n      this.deregisterRootHandlers_();\n      this.deregisterDeactivationHandlers_();\n    }\n    /**\n     * @param {boolean} supportsPressRipple Passed from init to save a redundant function call\n     * @private\n     */\n\n  }, {\n    key: \"registerRootHandlers_\",\n    value: function registerRootHandlers_(supportsPressRipple) {\n      var _this4 = this;\n\n      if (supportsPressRipple) {\n        ACTIVATION_EVENT_TYPES.forEach(function (type) {\n          _this4.adapter_.registerInteractionHandler(type, _this4.activateHandler_);\n        });\n\n        if (this.adapter_.isUnbounded()) {\n          this.adapter_.registerResizeHandler(this.resizeHandler_);\n        }\n      }\n\n      this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n      this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n    }\n    /**\n     * @param {!Event} e\n     * @private\n     */\n\n  }, {\n    key: \"registerDeactivationHandlers_\",\n    value: function registerDeactivationHandlers_(e) {\n      var _this5 = this;\n\n      if (e.type === 'keydown') {\n        this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);\n      } else {\n        POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {\n          _this5.adapter_.registerDocumentInteractionHandler(type, _this5.deactivateHandler_);\n        });\n      }\n    }\n    /** @private */\n\n  }, {\n    key: \"deregisterRootHandlers_\",\n    value: function deregisterRootHandlers_() {\n      var _this6 = this;\n\n      ACTIVATION_EVENT_TYPES.forEach(function (type) {\n        _this6.adapter_.deregisterInteractionHandler(type, _this6.activateHandler_);\n      });\n      this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n      this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n\n      if (this.adapter_.isUnbounded()) {\n        this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n      }\n    }\n    /** @private */\n\n  }, {\n    key: \"deregisterDeactivationHandlers_\",\n    value: function deregisterDeactivationHandlers_() {\n      var _this7 = this;\n\n      this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);\n      POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (type) {\n        _this7.adapter_.deregisterDocumentInteractionHandler(type, _this7.deactivateHandler_);\n      });\n    }\n    /** @private */\n\n  }, {\n    key: \"removeCssVars_\",\n    value: function removeCssVars_() {\n      var _this8 = this;\n\n      var strings = MDCRippleFoundation.strings;\n      Object.keys(strings).forEach(function (k) {\n        if (k.indexOf('VAR_') === 0) {\n          _this8.adapter_.updateCssVariable(strings[k], null);\n        }\n      });\n    }\n    /**\n     * @param {!Event=} e\n     * @private\n     */\n\n  }, {\n    key: \"activate_\",\n    value: function activate_(e) {\n      var _this9 = this;\n\n      if (this.adapter_.isSurfaceDisabled()) {\n        return;\n      }\n\n      var activationState = this.activationState_;\n\n      if (activationState.isActivated) {\n        return;\n      } // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n\n\n      var previousActivationEvent = this.previousActivationEvent_;\n      var isSameInteraction = previousActivationEvent && e !== undefined && previousActivationEvent.type !== e.type;\n\n      if (isSameInteraction) {\n        return;\n      }\n\n      activationState.isActivated = true;\n      activationState.isProgrammatic = e === undefined;\n      activationState.activationEvent = e;\n      activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e !== undefined && (e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown');\n      var hasActivatedChild = e !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {\n        return _this9.adapter_.containsEventTarget(target);\n      });\n\n      if (hasActivatedChild) {\n        // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n        this.resetActivationState_();\n        return;\n      }\n\n      if (e !== undefined) {\n        activatedTargets.push(\n        /** @type {!EventTarget} */\n        e.target);\n        this.registerDeactivationHandlers_(e);\n      }\n\n      activationState.wasElementMadeActive = this.checkElementMadeActive_(e);\n\n      if (activationState.wasElementMadeActive) {\n        this.animateActivation_();\n      }\n\n      requestAnimationFrame(function () {\n        // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n        activatedTargets = [];\n\n        if (!activationState.wasElementMadeActive && e !== undefined && (e.key === ' ' || e.keyCode === 32)) {\n          // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n          // active states inconsistently when they're called within event handling code:\n          // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n          // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n          // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n          // variable is set within a rAF callback for a submit button interaction (#2241).\n          activationState.wasElementMadeActive = _this9.checkElementMadeActive_(e);\n\n          if (activationState.wasElementMadeActive) {\n            _this9.animateActivation_();\n          }\n        }\n\n        if (!activationState.wasElementMadeActive) {\n          // Reset activation state immediately if element was not made active.\n          _this9.activationState_ = _this9.defaultActivationState_();\n        }\n      });\n    }\n    /**\n     * @param {!Event=} e\n     * @private\n     */\n\n  }, {\n    key: \"checkElementMadeActive_\",\n    value: function checkElementMadeActive_(e) {\n      return e !== undefined && e.type === 'keydown' ? this.adapter_.isSurfaceActive() : true;\n    }\n    /**\n     * @param {!Event=} event Optional event containing position information.\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate(event) {\n      this.activate_(event);\n    }\n    /** @private */\n\n  }, {\n    key: \"animateActivation_\",\n    value: function animateActivation_() {\n      var _this10 = this;\n\n      var _MDCRippleFoundation$3 = MDCRippleFoundation.strings,\n          VAR_FG_TRANSLATE_START = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_START,\n          VAR_FG_TRANSLATE_END = _MDCRippleFoundation$3.VAR_FG_TRANSLATE_END;\n      var _MDCRippleFoundation$4 = MDCRippleFoundation.cssClasses,\n          FG_DEACTIVATION = _MDCRippleFoundation$4.FG_DEACTIVATION,\n          FG_ACTIVATION = _MDCRippleFoundation$4.FG_ACTIVATION;\n      var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n      this.layoutInternal_();\n      var translateStart = '';\n      var translateEnd = '';\n\n      if (!this.adapter_.isUnbounded()) {\n        var _this$getFgTranslatio = this.getFgTranslationCoordinates_(),\n            startPoint = _this$getFgTranslatio.startPoint,\n            endPoint = _this$getFgTranslatio.endPoint;\n\n        translateStart = \"\".concat(startPoint.x, \"px, \").concat(startPoint.y, \"px\");\n        translateEnd = \"\".concat(endPoint.x, \"px, \").concat(endPoint.y, \"px\");\n      }\n\n      this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n      this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd); // Cancel any ongoing activation/deactivation animations\n\n      clearTimeout(this.activationTimer_);\n      clearTimeout(this.fgDeactivationRemovalTimer_);\n      this.rmBoundedActivationClasses_();\n      this.adapter_.removeClass(FG_DEACTIVATION); // Force layout in order to re-trigger the animation.\n\n      this.adapter_.computeBoundingRect();\n      this.adapter_.addClass(FG_ACTIVATION);\n      this.activationTimer_ = setTimeout(function () {\n        return _this10.activationTimerCallback_();\n      }, DEACTIVATION_TIMEOUT_MS);\n    }\n    /**\n     * @private\n     * @return {{startPoint: PointType, endPoint: PointType}}\n     */\n\n  }, {\n    key: \"getFgTranslationCoordinates_\",\n    value: function getFgTranslationCoordinates_() {\n      var _this$activationState = this.activationState_,\n          activationEvent = _this$activationState.activationEvent,\n          wasActivatedByPointer = _this$activationState.wasActivatedByPointer;\n      var startPoint;\n\n      if (wasActivatedByPointer) {\n        startPoint = getNormalizedEventCoords(\n        /** @type {!Event} */\n        activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());\n      } else {\n        startPoint = {\n          x: this.frame_.width / 2,\n          y: this.frame_.height / 2\n        };\n      } // Center the element around the start point.\n\n\n      startPoint = {\n        x: startPoint.x - this.initialSize_ / 2,\n        y: startPoint.y - this.initialSize_ / 2\n      };\n      var endPoint = {\n        x: this.frame_.width / 2 - this.initialSize_ / 2,\n        y: this.frame_.height / 2 - this.initialSize_ / 2\n      };\n      return {\n        startPoint: startPoint,\n        endPoint: endPoint\n      };\n    }\n    /** @private */\n\n  }, {\n    key: \"runDeactivationUXLogicIfReady_\",\n    value: function runDeactivationUXLogicIfReady_() {\n      var _this11 = this;\n\n      // This method is called both when a pointing device is released, and when the activation animation ends.\n      // The deactivation animation should only run after both of those occur.\n      var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n      var _this$activationState2 = this.activationState_,\n          hasDeactivationUXRun = _this$activationState2.hasDeactivationUXRun,\n          isActivated = _this$activationState2.isActivated;\n      var activationHasEnded = hasDeactivationUXRun || !isActivated;\n\n      if (activationHasEnded && this.activationAnimationHasEnded_) {\n        this.rmBoundedActivationClasses_();\n        this.adapter_.addClass(FG_DEACTIVATION);\n        this.fgDeactivationRemovalTimer_ = setTimeout(function () {\n          _this11.adapter_.removeClass(FG_DEACTIVATION);\n        }, numbers.FG_DEACTIVATION_MS);\n      }\n    }\n    /** @private */\n\n  }, {\n    key: \"rmBoundedActivationClasses_\",\n    value: function rmBoundedActivationClasses_() {\n      var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n      this.adapter_.removeClass(FG_ACTIVATION);\n      this.activationAnimationHasEnded_ = false;\n      this.adapter_.computeBoundingRect();\n    }\n  }, {\n    key: \"resetActivationState_\",\n    value: function resetActivationState_() {\n      var _this12 = this;\n\n      this.previousActivationEvent_ = this.activationState_.activationEvent;\n      this.activationState_ = this.defaultActivationState_(); // Touch devices may fire additional events for the same interaction within a short time.\n      // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n\n      setTimeout(function () {\n        return _this12.previousActivationEvent_ = undefined;\n      }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"deactivate_\",\n    value: function deactivate_() {\n      var _this13 = this;\n\n      var activationState = this.activationState_; // This can happen in scenarios such as when you have a keyup event that blurs the element.\n\n      if (!activationState.isActivated) {\n        return;\n      }\n\n      var state =\n      /** @type {!ActivationStateType} */\n      Object.assign({}, activationState);\n\n      if (activationState.isProgrammatic) {\n        requestAnimationFrame(function () {\n          return _this13.animateDeactivation_(state);\n        });\n        this.resetActivationState_();\n      } else {\n        this.deregisterDeactivationHandlers_();\n        requestAnimationFrame(function () {\n          _this13.activationState_.hasDeactivationUXRun = true;\n\n          _this13.animateDeactivation_(state);\n\n          _this13.resetActivationState_();\n        });\n      }\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      this.deactivate_();\n    }\n    /**\n     * @param {!ActivationStateType} options\n     * @private\n     */\n\n  }, {\n    key: \"animateDeactivation_\",\n    value: function animateDeactivation_(_ref) {\n      var wasActivatedByPointer = _ref.wasActivatedByPointer,\n          wasElementMadeActive = _ref.wasElementMadeActive;\n\n      if (wasActivatedByPointer || wasElementMadeActive) {\n        this.runDeactivationUXLogicIfReady_();\n      }\n    }\n  }, {\n    key: \"layout\",\n    value: function layout() {\n      var _this14 = this;\n\n      if (this.layoutFrame_) {\n        cancelAnimationFrame(this.layoutFrame_);\n      }\n\n      this.layoutFrame_ = requestAnimationFrame(function () {\n        _this14.layoutInternal_();\n\n        _this14.layoutFrame_ = 0;\n      });\n    }\n    /** @private */\n\n  }, {\n    key: \"layoutInternal_\",\n    value: function layoutInternal_() {\n      var _this15 = this;\n\n      this.frame_ = this.adapter_.computeBoundingRect();\n      var maxDim = Math.max(this.frame_.height, this.frame_.width); // Surface diameter is treated differently for unbounded vs. bounded ripples.\n      // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n      // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n      // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n      // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n      // `overflow: hidden`.\n\n      var getBoundedRadius = function getBoundedRadius() {\n        var hypotenuse = Math.sqrt(Math.pow(_this15.frame_.width, 2) + Math.pow(_this15.frame_.height, 2));\n        return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n      };\n\n      this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius(); // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n\n      this.initialSize_ = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n      this.fgScale_ = this.maxRadius_ / this.initialSize_;\n      this.updateLayoutCssVars_();\n    }\n    /** @private */\n\n  }, {\n    key: \"updateLayoutCssVars_\",\n    value: function updateLayoutCssVars_() {\n      var _MDCRippleFoundation$5 = MDCRippleFoundation.strings,\n          VAR_FG_SIZE = _MDCRippleFoundation$5.VAR_FG_SIZE,\n          VAR_LEFT = _MDCRippleFoundation$5.VAR_LEFT,\n          VAR_TOP = _MDCRippleFoundation$5.VAR_TOP,\n          VAR_FG_SCALE = _MDCRippleFoundation$5.VAR_FG_SCALE;\n      this.adapter_.updateCssVariable(VAR_FG_SIZE, \"\".concat(this.initialSize_, \"px\"));\n      this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);\n\n      if (this.adapter_.isUnbounded()) {\n        this.unboundedCoords_ = {\n          left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),\n          top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)\n        };\n        this.adapter_.updateCssVariable(VAR_LEFT, \"\".concat(this.unboundedCoords_.left, \"px\"));\n        this.adapter_.updateCssVariable(VAR_TOP, \"\".concat(this.unboundedCoords_.top, \"px\"));\n      }\n    }\n    /** @param {boolean} unbounded */\n\n  }, {\n    key: \"setUnbounded\",\n    value: function setUnbounded(unbounded) {\n      var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n\n      if (unbounded) {\n        this.adapter_.addClass(UNBOUNDED);\n      } else {\n        this.adapter_.removeClass(UNBOUNDED);\n      }\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      var _this16 = this;\n\n      requestAnimationFrame(function () {\n        return _this16.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      var _this17 = this;\n\n      requestAnimationFrame(function () {\n        return _this17.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n      });\n    }\n  }]);\n\n  return MDCRippleFoundation;\n}(MDCFoundation);\n\nexport default MDCRippleFoundation;","map":null,"metadata":{},"sourceType":"module"}