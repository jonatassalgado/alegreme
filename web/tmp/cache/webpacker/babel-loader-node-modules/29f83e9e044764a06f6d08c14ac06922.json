{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\n\nexport var TemplateResult =\n/*#__PURE__*/\nfunction () {\n  function TemplateResult(strings, values, type, processor) {\n    _classCallCheck(this, TemplateResult);\n\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n\n\n  _createClass(TemplateResult, [{\n    key: \"getHTML\",\n    value: function getHTML() {\n      var endIndex = this.strings.length - 1;\n      var html = '';\n\n      for (var i = 0; i < endIndex; i++) {\n        var s = this.strings[i]; // This replace() call does two things:\n        // 1) Appends a suffix to all bound attribute names to opt out of special\n        // attribute value parsing that IE11 and Edge do, like for style and\n        // many SVG attributes. The Template class also appends the same suffix\n        // when looking up attributes to creat Parts.\n        // 2) Adds an unquoted-attribute-safe marker for the first expression in\n        // an attribute. Subsequent attribute expressions will use node markers,\n        // and this is safe since attributes with multiple expressions are\n        // guaranteed to be quoted.\n\n        var addedMarker = false;\n        html += s.replace(lastAttributeNameRegex, function (_match, whitespace, name, value) {\n          addedMarker = true;\n          return whitespace + name + boundAttributeSuffix + value + marker;\n        });\n\n        if (!addedMarker) {\n          html += nodeMarker;\n        }\n      }\n\n      return html + this.strings[endIndex];\n    }\n  }, {\n    key: \"getTemplateElement\",\n    value: function getTemplateElement() {\n      var template = document.createElement('template');\n      template.innerHTML = this.getHTML();\n      return template;\n    }\n  }]);\n\n  return TemplateResult;\n}();\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\n\nexport var SVGTemplateResult =\n/*#__PURE__*/\nfunction (_TemplateResult) {\n  _inherits(SVGTemplateResult, _TemplateResult);\n\n  function SVGTemplateResult() {\n    _classCallCheck(this, SVGTemplateResult);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SVGTemplateResult).apply(this, arguments));\n  }\n\n  _createClass(SVGTemplateResult, [{\n    key: \"getHTML\",\n    value: function getHTML() {\n      return \"<svg>\".concat(_get(_getPrototypeOf(SVGTemplateResult.prototype), \"getHTML\", this).call(this), \"</svg>\");\n    }\n  }, {\n    key: \"getTemplateElement\",\n    value: function getTemplateElement() {\n      var template = _get(_getPrototypeOf(SVGTemplateResult.prototype), \"getTemplateElement\", this).call(this);\n\n      var content = template.content;\n      var svgElement = content.firstChild;\n      content.removeChild(svgElement);\n      reparentNodes(content, svgElement.firstChild);\n      return template;\n    }\n  }]);\n\n  return SVGTemplateResult;\n}(TemplateResult);","map":null,"metadata":{},"sourceType":"module"}