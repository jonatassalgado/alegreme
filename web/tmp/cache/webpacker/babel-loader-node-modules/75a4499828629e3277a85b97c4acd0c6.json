{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { strings, cssClasses, numbers } from './constants';\nimport MDCTopAppBarAdapter from './adapter';\nimport MDCFoundation from '@material/base/foundation';\n/**\n * @extends {MDCFoundation<!MDCTopAppBarAdapter>}\n */\n\nvar MDCTopAppBarBaseFoundation =\n/*#__PURE__*/\nfunction (_MDCFoundation) {\n  _inherits(MDCTopAppBarBaseFoundation, _MDCFoundation);\n\n  _createClass(MDCTopAppBarBaseFoundation, null, [{\n    key: \"strings\",\n\n    /** @return enum {string} */\n    get: function get() {\n      return strings;\n    }\n    /** @return enum {string} */\n\n  }, {\n    key: \"cssClasses\",\n    get: function get() {\n      return cssClasses;\n    }\n    /** @return enum {number} */\n\n  }, {\n    key: \"numbers\",\n    get: function get() {\n      return numbers;\n    }\n    /**\n     * {@see MDCTopAppBarAdapter} for typing information on parameters and return\n     * types.\n     * @return {!MDCTopAppBarAdapter}\n     */\n\n  }, {\n    key: \"defaultAdapter\",\n    get: function get() {\n      return (\n        /** @type {!MDCTopAppBarAdapter} */\n        {\n          hasClass: function hasClass()\n          /* className: string */\n          {},\n          addClass: function addClass()\n          /* className: string */\n          {},\n          removeClass: function removeClass()\n          /* className: string */\n          {},\n          setStyle: function setStyle()\n          /* property: string, value: string */\n          {},\n          getTopAppBarHeight: function getTopAppBarHeight() {},\n          registerNavigationIconInteractionHandler: function registerNavigationIconInteractionHandler()\n          /* type: string, handler: EventListener */\n          {},\n          deregisterNavigationIconInteractionHandler: function deregisterNavigationIconInteractionHandler()\n          /* type: string, handler: EventListener */\n          {},\n          notifyNavigationIconClicked: function notifyNavigationIconClicked() {},\n          registerScrollHandler: function registerScrollHandler()\n          /* handler: EventListener */\n          {},\n          deregisterScrollHandler: function deregisterScrollHandler()\n          /* handler: EventListener */\n          {},\n          registerResizeHandler: function registerResizeHandler()\n          /* handler: EventListener */\n          {},\n          deregisterResizeHandler: function deregisterResizeHandler()\n          /* handler: EventListener */\n          {},\n          getViewportScrollY: function getViewportScrollY() {\n            return (\n              /* number */\n              0\n            );\n          },\n          getTotalActionItems: function getTotalActionItems() {\n            return (\n              /* number */\n              0\n            );\n          }\n        }\n      );\n    }\n    /**\n     * @param {!MDCTopAppBarAdapter} adapter\n     */\n\n  }]);\n\n  function MDCTopAppBarBaseFoundation(\n  /** @type {!MDCTopAppBarAdapter} */\n  adapter) {\n    var _this;\n\n    _classCallCheck(this, MDCTopAppBarBaseFoundation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MDCTopAppBarBaseFoundation).call(this, Object.assign(MDCTopAppBarBaseFoundation.defaultAdapter, adapter)));\n\n    _this.navClickHandler_ = function () {\n      return _this.adapter_.notifyNavigationIconClicked();\n    };\n\n    _this.scrollHandler_ = function () {};\n\n    return _this;\n  }\n\n  _createClass(MDCTopAppBarBaseFoundation, [{\n    key: \"init\",\n    value: function init() {\n      this.adapter_.registerNavigationIconInteractionHandler('click', this.navClickHandler_);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.adapter_.deregisterNavigationIconInteractionHandler('click', this.navClickHandler_);\n    }\n  }, {\n    key: \"initScrollHandler\",\n    value: function initScrollHandler() {\n      this.adapter_.registerScrollHandler(this.scrollHandler_);\n    }\n  }, {\n    key: \"destroyScrollHandler\",\n    value: function destroyScrollHandler() {\n      this.adapter_.deregisterScrollHandler(this.scrollHandler_);\n    }\n  }]);\n\n  return MDCTopAppBarBaseFoundation;\n}(MDCFoundation);\n\nexport default MDCTopAppBarBaseFoundation;","map":null,"metadata":{},"sourceType":"module"}