{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport MDCTopAppBarAdapter from './adapter';\nimport MDCComponent from '@material/base/component';\nimport { MDCRipple } from '@material/ripple/index';\nimport { cssClasses, strings } from './constants';\nimport MDCTopAppBarBaseFoundation from './foundation';\nimport MDCFixedTopAppBarFoundation from './fixed/foundation';\nimport MDCShortTopAppBarFoundation from './short/foundation';\nimport MDCTopAppBarFoundation from './standard/foundation';\n/**\n * @extends {MDCComponent<!MDCTopAppBarBaseFoundation>}\n * @final\n */\n\nvar MDCTopAppBar =\n/*#__PURE__*/\nfunction (_MDCComponent) {\n  _inherits(MDCTopAppBar, _MDCComponent);\n\n  /**\n   * @param {...?} args\n   */\n  function MDCTopAppBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MDCTopAppBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MDCTopAppBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    /** @private {?Element} */\n\n    _this.navIcon_;\n    /** @type {?Array<MDCRipple>} */\n\n    _this.iconRipples_;\n    /** @type {Object} */\n\n    _this.scrollTarget_;\n    return _this;\n  }\n\n  _createClass(MDCTopAppBar, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var rippleFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {\n        return MDCRipple.attachTo(el);\n      };\n      this.navIcon_ = this.root_.querySelector(strings.NAVIGATION_ICON_SELECTOR); // Get all icons in the toolbar and instantiate the ripples\n\n      var icons = [].slice.call(this.root_.querySelectorAll(strings.ACTION_ITEM_SELECTOR));\n\n      if (this.navIcon_) {\n        icons.push(this.navIcon_);\n      }\n\n      this.iconRipples_ = icons.map(function (icon) {\n        var ripple = rippleFactory(icon);\n        ripple.unbounded = true;\n        return ripple;\n      });\n      this.scrollTarget_ = window;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.iconRipples_.forEach(function (iconRipple) {\n        return iconRipple.destroy();\n      });\n\n      _get(_getPrototypeOf(MDCTopAppBar.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"setScrollTarget\",\n    value: function setScrollTarget(target) {\n      this.foundation_.destroyScrollHandler();\n      this.scrollTarget_ = target;\n      this.foundation_.initScrollHandler();\n    }\n    /**\n     * @param {!Element} root\n     * @return {!MDCTopAppBar}\n     */\n\n  }, {\n    key: \"getDefaultFoundation\",\n\n    /**\n     * @return {!MDCTopAppBarBaseFoundation}\n     */\n    value: function getDefaultFoundation() {\n      var _this2 = this;\n\n      /** @type {!MDCTopAppBarAdapter} */\n      var adapter =\n      /** @type {!MDCTopAppBarAdapter} */\n      Object.assign({\n        hasClass: function hasClass(className) {\n          return _this2.root_.classList.contains(className);\n        },\n        addClass: function addClass(className) {\n          return _this2.root_.classList.add(className);\n        },\n        removeClass: function removeClass(className) {\n          return _this2.root_.classList.remove(className);\n        },\n        setStyle: function setStyle(property, value) {\n          return _this2.root_.style.setProperty(property, value);\n        },\n        getTopAppBarHeight: function getTopAppBarHeight() {\n          return _this2.root_.clientHeight;\n        },\n        registerNavigationIconInteractionHandler: function registerNavigationIconInteractionHandler(evtType, handler) {\n          if (_this2.navIcon_) {\n            _this2.navIcon_.addEventListener(evtType, handler);\n          }\n        },\n        deregisterNavigationIconInteractionHandler: function deregisterNavigationIconInteractionHandler(evtType, handler) {\n          if (_this2.navIcon_) {\n            _this2.navIcon_.removeEventListener(evtType, handler);\n          }\n        },\n        notifyNavigationIconClicked: function notifyNavigationIconClicked() {\n          _this2.emit(strings.NAVIGATION_EVENT, {});\n        },\n        registerScrollHandler: function registerScrollHandler(handler) {\n          return _this2.scrollTarget_.addEventListener('scroll', handler);\n        },\n        deregisterScrollHandler: function deregisterScrollHandler(handler) {\n          return _this2.scrollTarget_.removeEventListener('scroll', handler);\n        },\n        registerResizeHandler: function registerResizeHandler(handler) {\n          return window.addEventListener('resize', handler);\n        },\n        deregisterResizeHandler: function deregisterResizeHandler(handler) {\n          return window.removeEventListener('resize', handler);\n        },\n        getViewportScrollY: function getViewportScrollY() {\n          return _this2.scrollTarget_[_this2.scrollTarget_ === window ? 'pageYOffset' : 'scrollTop'];\n        },\n        getTotalActionItems: function getTotalActionItems() {\n          return _this2.root_.querySelectorAll(strings.ACTION_ITEM_SELECTOR).length;\n        }\n      });\n      /** @type {!MDCTopAppBarBaseFoundation} */\n\n      var foundation;\n\n      if (this.root_.classList.contains(cssClasses.SHORT_CLASS)) {\n        foundation = new MDCShortTopAppBarFoundation(adapter);\n      } else if (this.root_.classList.contains(cssClasses.FIXED_CLASS)) {\n        foundation = new MDCFixedTopAppBarFoundation(adapter);\n      } else {\n        foundation = new MDCTopAppBarFoundation(adapter);\n      }\n\n      return foundation;\n    }\n  }], [{\n    key: \"attachTo\",\n    value: function attachTo(root) {\n      return new MDCTopAppBar(root);\n    }\n  }]);\n\n  return MDCTopAppBar;\n}(MDCComponent);\n\nexport { MDCTopAppBar, MDCTopAppBarBaseFoundation, MDCTopAppBarFoundation, MDCFixedTopAppBarFoundation, MDCShortTopAppBarFoundation };","map":null,"metadata":{},"sourceType":"module"}