{"ast":null,"code":"'use strict';\n\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n  return _typeof2(obj);\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n};\n/*\nCopyright (C) 2012 - 2016 Markus Kohlhase <mail@markus-kohlhase.de>\n */\n\n\nvar _async = require('async');\n\nvar _async2 = _interopRequireDefault(_async);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _mkdirp = require('mkdirp');\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _clone = require('clone');\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar isJSONFile = function isJSONFile(f) {\n  return f.substr(-5) === \".json\";\n};\n\nvar removeFileExtension = function removeFileExtension(f) {\n  return f.split(\".json\")[0];\n};\n\nvar getIDs = function getIDs(a) {\n  return a.filter(isJSONFile).map(removeFileExtension);\n};\n\nvar readIDsSync = function readIDsSync(d) {\n  return getIDs(_fs2.default.readdirSync(d));\n};\n\nvar readIDs = function readIDs(d, cb) {\n  return _fs2.default.readdir(d, function (err, ids) {\n    return cb(err, getIDs(ids));\n  });\n};\n\nvar getObjectFromFileSync = function getObjectFromFileSync(id) {\n  try {\n    return JSON.parse(_fs2.default.readFileSync(this._getFileName(id), \"utf8\"));\n  } catch (error) {\n    return error;\n  }\n};\n\nvar getObjectFromFile = function getObjectFromFile(id, cb) {\n  _fs2.default.readFile(this._getFileName(id), \"utf8\", function (err, o) {\n    if (err) {\n      return cb(err);\n    }\n\n    try {\n      cb(null, JSON.parse(o));\n    } catch (error) {\n      cb(error);\n    }\n  });\n};\n\nvar FILE_EXISTS = _fs2.default.constants ? _fs2.default.constants.F_OK : _fs2.default.F_OK;\nvar FILE_IS_WRITABLE = _fs2.default.constants ? _fs2.default.constants.W_OK : _fs2.default.W_OK;\n\nvar canWriteToFile = function canWriteToFile(file, cb) {\n  _fs2.default.access(file, FILE_EXISTS, function (err) {\n    if (err) return cb(null);\n\n    _fs2.default.access(file, FILE_IS_WRITABLE, cb);\n  });\n};\n\nvar canWriteToFileSync = function canWriteToFileSync(file) {\n  try {\n    _fs2.default.accessSync(file, FILE_EXISTS);\n  } catch (err) {\n    return;\n  }\n\n  _fs2.default.accessSync(file, FILE_IS_WRITABLE);\n};\n\nvar saveObjectToFile = function saveObjectToFile(o, file, cb) {\n  var indent = this._pretty ? 2 : void 0;\n  var json = void 0;\n\n  try {\n    json = JSON.stringify(o, null, indent);\n  } catch (error) {\n    if (typeof cb === \"function\") {\n      return cb(error);\n    } else {\n      return error;\n    }\n  }\n\n  var tmpFileName = file + _uuid2.default.v4() + \".tmp\";\n\n  if (typeof cb === \"function\") {\n    canWriteToFile(file, function (err) {\n      if (err) return cb(err);\n\n      _fs2.default.writeFile(tmpFileName, json, 'utf8', function (err) {\n        if (err) return cb(err);\n\n        _fs2.default.rename(tmpFileName, file, cb);\n      });\n    });\n  } else {\n    try {\n      canWriteToFileSync(file);\n\n      _fs2.default.writeFileSync(tmpFileName, json, 'utf8');\n\n      _fs2.default.renameSync(tmpFileName, file);\n    } catch (error) {\n      return error;\n    }\n  }\n};\n\nvar id2fileName = function id2fileName(id, dir) {\n  return _path2.default.join(dir, id + \".json\");\n};\n\nvar _save = function _save(id, o, cb) {\n  var backup = void 0,\n      k = void 0,\n      data = void 0;\n\n  if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === \"object\") {\n    cb = o;\n    o = id;\n    id = null;\n  }\n\n  if (typeof id !== \"string\") {\n    id = this._idGenerator();\n  }\n\n  var file = this._getFileName(id);\n\n  o = (0, _clone2.default)(o);\n\n  if (this._saveId) {\n    if (typeof (k = this._saveId) === 'string' && k.length > 0) {\n      o[k] = id;\n    } else {\n      o.id = id;\n    }\n  }\n\n  if (this._single) {\n    backup = this._cache[id];\n    this._cache[id] = o;\n    data = this._cache;\n  } else {\n    data = o;\n  }\n\n  var done = function done(err) {\n    if (err) {\n      if (this._single) {\n        this._cache[id] = backup;\n      }\n\n      if (typeof cb === \"function\") {\n        cb(err);\n      } else {\n        return err;\n      }\n    } else {\n      this._cache[id] = o;\n\n      if (typeof cb === \"function\") {\n        cb(null, id);\n      } else {\n        return id;\n      }\n    }\n  };\n\n  if (this._memory) return done.call(this);\n\n  if (typeof cb === \"function\") {\n    saveObjectToFile.call(this, data, file, done.bind(this));\n  } else {\n    return done.call(this, saveObjectToFile.call(this, data, file));\n  }\n};\n\nvar _get = function _get(id, cb) {\n  var o = (0, _clone2.default)(this._cache[id]);\n\n  if ((typeof o === 'undefined' ? 'undefined' : _typeof(o)) === \"object\") {\n    return typeof cb === \"function\" ? cb(null, o) : o;\n  }\n\n  var done = function done(err, o) {\n    var e = void 0,\n        item = void 0;\n\n    if (err) {\n      var _e = new Error(\"could not load data\");\n\n      if (typeof cb === \"function\") {\n        return cb(_e);\n      } else {\n        return _e;\n      }\n    }\n\n    item = this._single ? o[id] : o;\n\n    if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== \"object\") {\n      e = new Error(\"could not load data\");\n\n      if (typeof cb === \"function\") {\n        return cb(e);\n      } else {\n        return e;\n      }\n    }\n\n    this._cache[id] = item;\n\n    if (typeof cb === \"function\") {\n      return cb(null, item);\n    } else {\n      return item;\n    }\n  };\n\n  if (this._memory) return done.call(this, null, o);\n  if (typeof cb === \"function\") return getObjectFromFile.call(this, id, done.bind(this));\n  var err = (o = getObjectFromFileSync.call(this, id)) instanceof Error;\n  return done.call(this, err ? o : void 0, !err ? o : void 0);\n};\n\nvar remove = function remove(id, cb) {\n  var e = void 0,\n      err = void 0,\n      notInCache = void 0,\n      o = void 0;\n\n  var file = this._getFileName(id);\n\n  var cacheBackup = this._cache[id];\n\n  if ((typeof cacheBackup === 'undefined' ? 'undefined' : _typeof(cacheBackup)) !== \"object\") {\n    notInCache = new Error(id + \" does not exist\");\n  }\n\n  var done = function done(err) {\n    if (err) {\n      this._cache[id] = cacheBackup;\n      return typeof cb === \"function\" ? cb(err) : err;\n    }\n\n    delete this._cache[id];\n    return typeof cb === \"function\" ? cb() : void 0;\n  };\n\n  if (this._single) {\n    delete this._cache[id];\n\n    if (this._memory || notInCache !== undefined) {\n      return done.call(this, notInCache);\n    }\n\n    if (typeof cb === \"function\") {\n      return saveObjectToFile.call(this, this._cache, file, done.bind(this));\n    }\n\n    err = (o = saveObjectToFile.call(this, this._cache, file)) instanceof Error;\n    return done.call(this, err ? o : void 0, !err ? o : void 0);\n  }\n\n  if (this._memory) return done.call(this, notInCache);\n  if (typeof cb === \"function\") return _fs2.default.unlink(file, done.bind(this));\n\n  try {\n    return done.call(this, _fs2.default.unlinkSync(file));\n  } catch (error) {\n    return done.call(this, error);\n  }\n};\n\nvar Store = function () {\n  function Store() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';\n    var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Store);\n\n    this.name = name;\n    this._single = opt.single === true || opt.type === 'single';\n    this._pretty = opt.pretty === true;\n    this._memory = opt.memory === true || opt.type === 'memory';\n    this._saveId = opt.saveId;\n    this._idGenerator = typeof opt.idGenerator === \"function\" ? opt.idGenerator : _uuid2.default.v4;\n\n    if (isJSONFile(this.name)) {\n      this.name = this.name.split(\".json\")[0];\n      this._single = true;\n    }\n\n    this._dir = _path2.default.resolve(this.name);\n\n    if (this._single) {\n      this._dir = _path2.default.dirname(this._dir);\n    }\n\n    this._cache = {};\n\n    if (!this._memory) {\n      _mkdirp2.default.sync(this._dir);\n    }\n\n    if (this._single) {\n      if (!this._memory) {\n        var fn = this._getFileName();\n\n        if (!_fs2.default.existsSync(fn)) {\n          if (_fs2.default.writeFileSync(fn, \"{}\", 'utf8')) {\n            throw new Error(\"could not create database\");\n          }\n        }\n      }\n\n      this._cache = this.allSync();\n    }\n  }\n\n  _createClass(Store, [{\n    key: '_getFileName',\n    value: function _getFileName(id) {\n      if (this._single) {\n        return _path2.default.join(this._dir, _path2.default.basename(this.name) + \".json\");\n      } else {\n        return id2fileName(id, this._dir);\n      }\n    }\n  }, {\n    key: 'save',\n    value: function save(id, o) {\n      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n      return _save.call(this, id, o, cb);\n    }\n  }, {\n    key: 'saveSync',\n    value: function saveSync(id, o) {\n      return _save.call(this, id, o);\n    }\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n      _get.call(this, id, cb);\n    }\n  }, {\n    key: 'getSync',\n    value: function getSync(id) {\n      return _get.call(this, id);\n    }\n  }, {\n    key: 'delete',\n    value: function _delete(id, cb) {\n      remove.call(this, id, cb);\n    }\n  }, {\n    key: 'deleteSync',\n    value: function deleteSync(id) {\n      return remove.call(this, id);\n    }\n  }, {\n    key: 'all',\n    value: function all() {\n      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      if (this._memory) return cb(null, this._cache);\n\n      if (this._single) {\n        return getObjectFromFile.call(this, void 0, cb);\n      }\n\n      readIDs(this._dir, function (err, ids) {\n        var _this = this;\n\n        if (typeof err !== \"undefined\" && err !== null) {\n          return cb(err);\n        }\n\n        var all = {};\n        var loaders = ids.map(function (id) {\n          return function (cb) {\n            return this.get(id, function (err, o) {\n              if (!err) {\n                all[id] = o;\n              }\n\n              return cb(err);\n            });\n          }.bind(_this);\n        });\n\n        _async2.default.parallel(loaders, function (err) {\n          return cb(err, all);\n        });\n      }.bind(this));\n    }\n  }, {\n    key: 'allSync',\n    value: function allSync() {\n      var _this2 = this;\n\n      if (this._memory) return this._cache;\n\n      if (this._single) {\n        var db = getObjectFromFileSync.call(this);\n\n        if ((typeof db === 'undefined' ? 'undefined' : _typeof(db)) !== \"object\") {\n          throw new Error(\"could not load database\");\n        }\n\n        return db;\n      }\n\n      var objects = {};\n      readIDsSync(this._dir).forEach(function (f) {\n        var item = getObjectFromFileSync.call(_this2, f);\n\n        if (item !== undefined) {\n          objects[f] = item;\n        } else {\n          console.error(\"could not load '\" + f + \"'\");\n        }\n      });\n      return objects;\n    }\n  }]);\n\n  return Store;\n}();\n\nmodule.exports = Store;","map":null,"metadata":{},"sourceType":"module"}