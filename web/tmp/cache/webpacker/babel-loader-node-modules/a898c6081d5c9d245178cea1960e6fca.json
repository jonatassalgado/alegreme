{"ast":null,"code":"function _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n            <i class=\\\"material-icons mdc-button__icon\\\">star</i>\\n            <span class=\\\"mdc-button__label\\\" style=\\\"text-align: right\\\">\\n              Salvar\\n            </span>\\n          \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n            <i class=\\\"material-icons mdc-button__icon\\\">star</i>\\n            <span class=\\\"mdc-button__label\\\" style=\\\"text-align: right\\\">\\n              Salvo\\n            </span>\\n          \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        \", \"\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport { Controller } from \"stimulus\";\nimport { html, render } from 'lit-html';\n\nvar EventController =\n/*#__PURE__*/\nfunction (_Controller) {\n  _inherits(EventController, _Controller);\n\n  function EventController() {\n    _classCallCheck(this, EventController);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EventController).apply(this, arguments));\n  }\n\n  _createClass(EventController, [{\n    key: \"initialize\",\n    value: function initialize() {}\n  }, {\n    key: \"like\",\n    value: function like() {\n      var self = this;\n      Rails.ajax({\n        type: self.isFavorited,\n        url: \"/events/\".concat(self.identifier, \"/favorite\"),\n        success: function success(response) {\n          // self.likeCount = response\n          self.likeActive = response;\n          self.data.set(\"favorited\", response.favorited);\n          self.favoriteController.updateList = response.all_favorited;\n        },\n        error: function error(response) {\n          console.log(response);\n        }\n      });\n    }\n  }, {\n    key: \"isFavorited\",\n    get: function get() {\n      if (this.data.get(\"favorited\") == \"true\") {\n        return \"DELETE\";\n      } else {\n        return \"POST\";\n      }\n    }\n  }, {\n    key: \"identifier\",\n    get: function get() {\n      return this.data.get(\"identifier\");\n    }\n  }, {\n    key: \"favoriteController\",\n    get: function get() {\n      return this.application.controllers.find(function (controller) {\n        return controller.context.identifier === 'favorite';\n      });\n    }\n  }, {\n    key: \"likeCount\",\n    set: function set(value) {\n      var likeElementsCounts = document.querySelectorAll(\"[data-event-identifier=\\\"\".concat(value.event_id, \"\\\"] .me-like-count\"));\n      likeElementsCounts.forEach(function (count) {\n        count.textContent = value.event_likes_count;\n      });\n    }\n  }, {\n    key: \"likeActive\",\n    set: function set(value) {\n      var like = function like(favorite) {\n        return html(_templateObject(), favorite ? html(_templateObject2()) : html(_templateObject3()));\n      };\n\n      var likeButtonsWrapper = this.likeButtonTarget;\n      likeButtonsWrapper.classList.toggle('mdc-button--raised');\n      render(like(value.favorited), likeButtonsWrapper);\n    }\n  }]);\n\n  return EventController;\n}(Controller);\n\nEventController.targets = [\"event\", \"like\", \"likeButton\", \"likeCount\"];\nexport { EventController as default };","map":{"version":3,"sources":["/home/jon/Projects/alegreme/app/app/javascript/controllers/event_controller.js"],"names":["Controller","html","render","EventController","self","Rails","ajax","type","isFavorited","url","identifier","success","response","likeActive","data","set","favorited","favoriteController","updateList","all_favorited","error","console","log","get","application","controllers","find","controller","context","value","likeElementsCounts","document","querySelectorAll","event_id","forEach","count","textContent","event_likes_count","like","favorite","likeButtonsWrapper","likeButtonTarget","classList","toggle","targets"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,UAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,UAA7B;;IAGqBC,e;;;;;;;;;;;;;iCAGN,CAEZ;;;2BAEM;AACL,UAAMC,IAAI,GAAG,IAAb;AAEAC,MAAAA,KAAK,CAACC,IAAN,CAAW;AACTC,QAAAA,IAAI,EAAEH,IAAI,CAACI,WADF;AAETC,QAAAA,GAAG,oBAAaL,IAAI,CAACM,UAAlB,cAFM;AAGTC,QAAAA,OAAO,EAAE,iBAASC,QAAT,EAAkB;AACzB;AACAR,UAAAA,IAAI,CAACS,UAAL,GAAkBD,QAAlB;AACAR,UAAAA,IAAI,CAACU,IAAL,CAAUC,GAAV,CAAc,WAAd,EAA2BH,QAAQ,CAACI,SAApC;AACAZ,UAAAA,IAAI,CAACa,kBAAL,CAAwBC,UAAxB,GAAqCN,QAAQ,CAACO,aAA9C;AACD,SARQ;AASTC,QAAAA,KAAK,EAAE,eAASR,QAAT,EAAkB;AACvBS,UAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACD;AAXQ,OAAX;AAaD;;;wBAEiB;AAChB,UAAI,KAAKE,IAAL,CAAUS,GAAV,CAAc,WAAd,KAA8B,MAAlC,EAA0C;AACxC,eAAO,QAAP;AACD,OAFD,MAEO;AACL,eAAO,MAAP;AACD;AACF;;;wBAEgB;AACf,aAAO,KAAKT,IAAL,CAAUS,GAAV,CAAc,YAAd,CAAP;AACD;;;wBAEwB;AACvB,aAAO,KAAKC,WAAL,CAAiBC,WAAjB,CAA6BC,IAA7B,CAAkC,UAASC,UAAT,EAAqB;AAC5D,eAAOA,UAAU,CAACC,OAAX,CAAmBlB,UAAnB,KAAkC,UAAzC;AACD,OAFM,CAAP;AAGD;;;sBAEamB,K,EAAO;AACnB,UAAMC,kBAAkB,GAAGC,QAAQ,CAACC,gBAAT,oCAAqDH,KAAK,CAACI,QAA3D,wBAA3B;AACAH,MAAAA,kBAAkB,CAACI,OAAnB,CAA4B,UAAAC,KAAK,EAAI;AAAEA,QAAAA,KAAK,CAACC,WAAN,GAAoBP,KAAK,CAACQ,iBAA1B;AAA6C,OAApF;AACD;;;sBAEcR,K,EAAO;AAEpB,UAAMS,IAAI,GAAG,SAAPA,IAAO,CAACC,QAAD;AAAA,eACXtC,IADW,oBAENsC,QAAQ,GACTtC,IADS,uBAUTA,IAVS,oBAFF;AAAA,OAAb;;AAqBA,UAAMuC,kBAAkB,GAAG,KAAKC,gBAAhC;AACAD,MAAAA,kBAAkB,CAACE,SAAnB,CAA6BC,MAA7B,CAAoC,oBAApC;AAEAzC,MAAAA,MAAM,CAACoC,IAAI,CAACT,KAAK,CAACb,SAAP,CAAL,EAAwBwB,kBAAxB,CAAN;AACD;;;;EA3E0CxC,U;;AAAxBG,e,CACZyC,O,GAAU,CAAE,OAAF,EAAW,MAAX,EAAmB,YAAnB,EAAiC,WAAjC,C;SADEzC,e","sourcesContent":["import { Controller } from \"stimulus\"\nimport { html, render } from 'lit-html';\n\n\nexport default class EventController extends Controller {\n  static targets = [ \"event\", \"like\", \"likeButton\", \"likeCount\" ];\n\n  initialize() {\n\n  }\n\n  like() {\n    const self = this\n\n    Rails.ajax({\n      type: self.isFavorited,\n      url: `/events/${self.identifier}/favorite`,\n      success: function(response){\n        // self.likeCount = response\n        self.likeActive = response\n        self.data.set(\"favorited\", response.favorited)\n        self.favoriteController.updateList = response.all_favorited\n      },\n      error: function(response){\n        console.log(response)\n      }\n    })\n  }\n\n  get isFavorited() {\n    if (this.data.get(\"favorited\") == \"true\") {\n      return \"DELETE\"\n    } else {\n      return \"POST\"\n    }\n  }\n\n  get identifier() {\n    return this.data.get(\"identifier\")\n  }\n\n  get favoriteController() {\n    return this.application.controllers.find(function(controller) {\n      return controller.context.identifier === 'favorite'\n    })\n  }\n\n  set likeCount(value) {\n    const likeElementsCounts = document.querySelectorAll(`[data-event-identifier=\"${value.event_id}\"] .me-like-count`)\n    likeElementsCounts.forEach( count => { count.textContent = value.event_likes_count } )\n  }\n\n  set likeActive(value) {\n\n    const like = (favorite) =>\n      html `\n        ${ favorite ?\n          html `\n            <i class=\"material-icons mdc-button__icon\">star</i>\n            <span class=\"mdc-button__label\" style=\"text-align: right\">\n              Salvo\n            </span>\n          `\n\n          :\n\n          html `\n            <i class=\"material-icons mdc-button__icon\">star</i>\n            <span class=\"mdc-button__label\" style=\"text-align: right\">\n              Salvar\n            </span>\n          `\n        }\n      `;\n\n    const likeButtonsWrapper = this.likeButtonTarget;\n    likeButtonsWrapper.classList.toggle('mdc-button--raised');\n\n    render(like(value.favorited), likeButtonsWrapper);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}